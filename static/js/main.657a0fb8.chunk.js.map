{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","newIndex","newColour","sameQuote","sameColour","Math","floor","random","state","index","indexOf","color","console","log","setState","quotes","quote","author","_this2","fetch","then","response","json","r","catch","err","react_default","a","createElement","className","style","background","App_QuoteBox","q","getIndex","Component","QuoteBox","tweetURL","id","href","target","rel","backgroundColor","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCIlCC,eAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAU,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAE9KC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,YAAc,WAMZ,IALA,IAEIC,EACAC,EAHAC,GAAY,EACZC,GAAa,EAIXD,GAEJA,GADAF,EAAWI,KAAKC,MAAsB,GAAhBD,KAAKE,YACFd,EAAKe,MAAMC,MAGtC,KAAML,GAEJA,GADAF,EAAYG,KAAKC,MAAsB,GAAhBD,KAAKE,YACDjB,EAAOoB,QAAQjB,EAAKe,MAAMG,OAGvDC,QAAQC,IAAI,aAAeZ,EAAW,gBAAkBC,GACxDT,EAAKqB,SAAS,CACZL,MAAOR,EACPU,MAAOrB,EAAOY,MA1BhBT,EAAKe,MAAQ,CACXO,OAAQ,CAAC,CAAEC,MAAO,qBAAsBC,OAAQ,KAChDR,MAAO,EACPE,MAAOrB,EAAO,IALCG,mFAgCC,IAAAyB,EAAAtB,KAElBuB,MADkB,wIAEfC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKJ,SAAS,CACZC,OAAQQ,EAAER,OACVN,MAAOJ,KAAKC,MAAsB,GAAhBD,KAAKE,UACvBI,MAAOrB,EAAOe,KAAKC,MAAsB,GAAhBD,KAAKE,eAE/BiB,MAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,sCAI9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,WAAYnC,KAAKY,MAAMG,QAClDe,EAAAC,EAAAC,cAACI,EAAD,CACEC,EAAGrC,KAAKY,MAAMO,OAAOnB,KAAKY,MAAMC,OAChCyB,SAAUtC,KAAKI,YACfW,MAAOf,KAAKY,MAAMG,gBApDVwB,aA2DZC,cACJ,SAAAA,EAAY5C,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,GAAA1C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KACZJ,0EAIN,IAAI6C,EAAW,0CAA4CzC,KAAKJ,MAAMyC,EAAEjB,MAAQ,OAAcpB,KAAKJ,MAAMyC,EAAEhB,OAAS,qCACpH,OACES,EAAAC,EAAAC,cAAA,OAAKU,GAAG,aACNZ,EAAAC,EAAAC,cAAA,OAAKU,GAAG,iBAAiBR,MAAO,CAACnB,MAAOf,KAAKJ,MAAMmB,QACjDe,EAAAC,EAAAC,cAAA,OAAKU,GAAG,QAAR,IAAiB1C,KAAKJ,MAAMyC,EAAEjB,MAA9B,KACAU,EAAAC,EAAAC,cAAA,OAAKU,GAAG,UAAR,KAAoB1C,KAAKJ,MAAMyC,EAAEhB,SAEnCS,EAAAC,EAAAC,cAAA,OAAKU,GAAG,oBACNZ,EAAAC,EAAAC,cAAA,KAAGW,KAAMF,EAAUC,GAAG,cAAcE,OAAO,SAASC,IAAI,uBAAsBf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAQC,MAAO,CAACY,gBAAiB9C,KAAKJ,MAAMmB,QAAQe,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAnF,WAC9EH,EAAAC,EAAAC,cAAA,UAAQU,GAAG,YAAYK,QAAS/C,KAAKJ,MAAM0C,SAAUJ,MAAO,CAACY,gBAAiB9C,KAAKJ,MAAMmB,QAAzF,sBAfawB,aAsBR5C,IC3EKqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.657a0fb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst colors = ['#96ABA7', '#719e35', '#52ad9a', '#3b3a36', '#7d4627', '#89bdd3','#bd222f', '#173e43', '#22264b', '#5a5c51', '#aa863a', '#283018', '#7baa71', '#3d5094', '#e05038', '#e6af4b'];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      quotes: [{ quote: 'fetching quotes...', author: ''}],\r\n      index: 0,\r\n      color: colors[0]\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    let sameQuote = true;\r\n    let sameColour = true;\r\n    let newIndex;\r\n    let newColour;\r\n    //guard against displaying same quote twice in a row\r\n    while(sameQuote) {   \r\n      newIndex = Math.floor(Math.random() * 25);\r\n      sameQuote = (newIndex == this.state.index) ? true : false;     \r\n    }\r\n    //guard against displaying same colour twice in a row\r\n    while(sameColour) {\r\n      newColour = Math.floor(Math.random() * 16);\r\n      sameColour = (newColour == colors.indexOf(this.state.color)) ? true : false;\r\n    }\r\n\r\n    console.log('newIndex: ' + newIndex + ', newColour: ' + newColour);\r\n    this.setState({\r\n      index: newIndex,\r\n      color: colors[newColour]\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const quotesURL = \"https://gist.githubusercontent.com/johnno8/455be897f86a71a8fbdbbd49855ba83b/raw/ce5d6322e414ad6ce02620b7d42331be57bbc528/quotes.json\" \r\n    fetch(quotesURL)\r\n      .then(response => response.json())\r\n      .then(r => {\r\n        this.setState({\r\n          quotes: r.quotes,\r\n          index: Math.floor(Math.random() * 25),\r\n          color: colors[Math.floor(Math.random() * 16)]\r\n        });\r\n      }).catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={{background: this.state.color}}>\r\n        <QuoteBox \r\n          q={this.state.quotes[this.state.index]} \r\n          getIndex={this.handleClick}\r\n          color={this.state.color}/>    \r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\n\r\nclass QuoteBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    let tweetURL = 'https://twitter.com/intent/tweet?text=\"' + this.props.q.quote + '\"' + ' - ' + this.props.q.author + '&hashtags=freecodecamp,randomquote';\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <div id=\"text-container\" style={{color: this.props.color}}>\r\n          <div id=\"text\">'{this.props.q.quote}'</div>\r\n          <div id=\"author\">- {this.props.q.author}</div>\r\n        </div>\r\n        <div id=\"quote-box-footer\">\r\n          <a href={tweetURL} id=\"tweet-quote\" target=\"_blank\" rel=\"noopener noreferrer\"><button className=\"tweet\" style={{backgroundColor: this.props.color}}><i className=\"fa fa-twitter\"/> Tweet</button></a>\r\n          <button id=\"new-quote\" onClick={this.props.getIndex} style={{backgroundColor: this.props.color}}>New quote</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import '../node_modules/font-awesome/css/font-awesome.min.css'; \nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}